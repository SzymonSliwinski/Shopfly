// <auto-generated />
using System;
using Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Common.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211220183704_FixedPasswordLength")]
    partial class FixedPasswordLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Common.Models.ApiModels.ApiAccessKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("ApiAccessKeys");
                });

            modelBuilder.Entity("Common.Models.ApiModels.ApiKeysTablesMethods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApiAccessKeyId")
                        .HasColumnType("int");

                    b.Property<int>("HttpMethod")
                        .HasColumnType("int");

                    b.Property<int>("Table")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiAccessKeyId");

                    b.ToTable("ApiKeysTablesMethods");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("DeliveryDaysMaximum")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryDaysMinimum")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Logo")
                        .IsUnique()
                        .HasFilter("[Logo] IS NOT NULL");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRoot")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Comment", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewsletterSubscribed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Common.Models.ShopModels.CustomerFavouritesProducts", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerFavouritesProducts");
                });

            modelBuilder.Entity("Common.Models.ShopModels.HomeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Url")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HomeLists");
                });

            modelBuilder.Entity("Common.Models.ShopModels.HomeProductsLists", b =>
                {
                    b.Property<int>("ListId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ListId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("HomeProductsLists");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BillingAddressCity")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BillingAddressCountry")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BillingAddressPostal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("BillingAddressStreet")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddressCity")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DeliveryAddressCountry")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DeliveryAddressPostal")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DeliveryAddressStreet")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Nip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<float>("PriceTotal")
                        .HasColumnType("real");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Common.Models.ShopModels.OrdersProducts", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<float>("ProductQuantity")
                        .HasColumnType("real");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("Common.Models.ShopModels.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Path")
                        .IsUnique()
                        .HasFilter("[Path] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AdditionalShippingCost")
                        .HasColumnType("real");

                    b.Property<float>("BruttoPrice")
                        .HasColumnType("real");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLowStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("NettoPrice")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int?>("TaxId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TaxId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HexValue")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("HexValue")
                        .IsUnique()
                        .HasFilter("[HexValue] IS NOT NULL");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductDimensions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("ProductDimensions");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("DimensionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SalePercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DimensionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsCarriers", b =>
                {
                    b.Property<int>("CarrierId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CarrierId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCarriers");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsPayments", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "PaymentTypeId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("ProductsPayments");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsTags", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsTags");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsVariantsPhotos", b =>
                {
                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.HasKey("ProductVariantId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.ToTable("ProductsVariantsPhotos");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Rating", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Interest")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.EmployeesProfiles", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("EmployeesProfiles");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.ProfilesPrivileges", b =>
                {
                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("PrivilegeId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfilesPrivileges");
                });

            modelBuilder.Entity("Common.Models.ShopSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowGuestsForShopping")
                        .HasColumnType("bit");

                    b.Property<int>("DefaultSortBy")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayProductQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("FaviconPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("HowLongDefinedAsNew")
                        .HasColumnType("smallint");

                    b.Property<string>("ImportFileSeparator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<short>("MaxPhotoSize")
                        .HasColumnType("smallint");

                    b.Property<string>("MultipleValuesInFileSeparator")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<short>("ProductsPerPage")
                        .HasColumnType("smallint");

                    b.Property<string>("ShopLogoPath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShopName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ShopSettings");
                });

            modelBuilder.Entity("Common.Models.ApiModels.ApiKeysTablesMethods", b =>
                {
                    b.HasOne("Common.Models.ApiModels.ApiAccessKey", "ApiAccessKey")
                        .WithMany("ApiKeysTablesMethods")
                        .HasForeignKey("ApiAccessKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiAccessKey");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Category", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Category", "ParentCategory")
                        .WithMany("ChildrensCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Comment", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.CustomerFavouritesProducts", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Customer", "Customer")
                        .WithMany("CustomerFavouritesProducts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("CustomerFavouritesProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.HomeProductsLists", b =>
                {
                    b.HasOne("Common.Models.ShopModels.HomeList", "HomeList")
                        .WithMany("HomeProductsLists")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("HomeProductsLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HomeList");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Order", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Carrier", "Carrier")
                        .WithMany("Orders")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.PaymentType", "PaymentType")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrier");

                    b.Navigation("Customer");

                    b.Navigation("PaymentType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Common.Models.ShopModels.OrdersProducts", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Product", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId");

                    b.Navigation("Category");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductVariant", b =>
                {
                    b.HasOne("Common.Models.ShopModels.ProductColor", "Color")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ColorId");

                    b.HasOne("Common.Models.ShopModels.ProductDimensions", "Dimension")
                        .WithMany("ProductsVariants")
                        .HasForeignKey("DimensionId");

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("ProductsVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Dimension");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsCarriers", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Carrier", "Carrier")
                        .WithMany("ProductsCarriers")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("ProductsCarriers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrier");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsPayments", b =>
                {
                    b.HasOne("Common.Models.ShopModels.PaymentType", "PaymentType")
                        .WithMany("ProductsPayments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("ProductsPayments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsTags", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("ProductsTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Tag", "Tag")
                        .WithMany("ProductsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductsVariantsPhotos", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Photo", "Photo")
                        .WithMany("ProductsVariantsPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.ProductVariant", "ProductVariant")
                        .WithMany("ProductsVariantsPhotos")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Photo");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Rating", b =>
                {
                    b.HasOne("Common.Models.ShopModels.Customer", "Customer")
                        .WithMany("Ratings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopModels.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.EmployeesProfiles", b =>
                {
                    b.HasOne("Common.Models.ShopPanelModels.Employee", "Employee")
                        .WithMany("EmployeesProfiles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopPanelModels.Profile", "Profile")
                        .WithMany("EmployeesProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.ProfilesPrivileges", b =>
                {
                    b.HasOne("Common.Models.ShopPanelModels.Privilege", "Privilege")
                        .WithMany("ProfilesPrivileges")
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Common.Models.ShopPanelModels.Profile", "Profile")
                        .WithMany("ProfilesPrivileges")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Privilege");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Common.Models.ApiModels.ApiAccessKey", b =>
                {
                    b.Navigation("ApiKeysTablesMethods");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Carrier", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductsCarriers");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Category", b =>
                {
                    b.Navigation("ChildrensCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomerFavouritesProducts");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Common.Models.ShopModels.HomeList", b =>
                {
                    b.Navigation("HomeProductsLists");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Order", b =>
                {
                    b.Navigation("OrdersProducts");
                });

            modelBuilder.Entity("Common.Models.ShopModels.PaymentType", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductsPayments");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Photo", b =>
                {
                    b.Navigation("ProductsVariantsPhotos");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomerFavouritesProducts");

                    b.Navigation("HomeProductsLists");

                    b.Navigation("OrdersProducts");

                    b.Navigation("ProductsCarriers");

                    b.Navigation("ProductsPayments");

                    b.Navigation("ProductsTags");

                    b.Navigation("ProductsVariants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductColor", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductDimensions", b =>
                {
                    b.Navigation("ProductsVariants");
                });

            modelBuilder.Entity("Common.Models.ShopModels.ProductVariant", b =>
                {
                    b.Navigation("ProductsVariantsPhotos");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Tag", b =>
                {
                    b.Navigation("ProductsTags");
                });

            modelBuilder.Entity("Common.Models.ShopModels.Tax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Employee", b =>
                {
                    b.Navigation("EmployeesProfiles");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Privilege", b =>
                {
                    b.Navigation("ProfilesPrivileges");
                });

            modelBuilder.Entity("Common.Models.ShopPanelModels.Profile", b =>
                {
                    b.Navigation("EmployeesProfiles");

                    b.Navigation("ProfilesPrivileges");
                });
#pragma warning restore 612, 618
        }
    }
}
